# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `net-pop` gem.
# Please instead update this file by running `bin/tapioca gem net-pop`.

class Net::APOP < ::Net::POP3
  def apop?; end
end

Net::APOPSession = Net::APOP
Net::POP = Net::POP3

class Net::POP3 < ::Net::Protocol
  def initialize(addr, port = T.unsafe(nil), isapop = T.unsafe(nil)); end

  def active?; end
  def address; end
  def apop?; end
  def auth_only(account, password); end
  def delete_all; end
  def disable_ssl; end
  def each(&block); end
  def each_mail(&block); end
  def enable_ssl(verify_or_params = T.unsafe(nil), certs = T.unsafe(nil), port = T.unsafe(nil)); end
  def finish; end
  def inspect; end
  def logging(msg); end
  def mails; end
  def n_bytes; end
  def n_mails; end
  def open_timeout; end
  def open_timeout=(_arg0); end
  def port; end
  def read_timeout; end
  def read_timeout=(sec); end
  def reset; end
  def set_all_uids; end
  def set_debug_output(arg); end
  def start(account, password); end
  def started?; end
  def use_ssl?; end

  private

  def command; end
  def do_finish; end
  def do_start(account, password); end
  def on_connect; end

  class << self
    def APOP(isapop); end
    def auth_only(address, port = T.unsafe(nil), account = T.unsafe(nil), password = T.unsafe(nil), isapop = T.unsafe(nil)); end
    def certs; end
    def create_ssl_params(verify_or_params = T.unsafe(nil), certs = T.unsafe(nil)); end
    def default_pop3_port; end
    def default_pop3s_port; end
    def default_port; end
    def delete_all(address, port = T.unsafe(nil), account = T.unsafe(nil), password = T.unsafe(nil), isapop = T.unsafe(nil), &block); end
    def disable_ssl; end
    def enable_ssl(*args); end
    def foreach(address, port = T.unsafe(nil), account = T.unsafe(nil), password = T.unsafe(nil), isapop = T.unsafe(nil), &block); end
    def socket_type; end
    def ssl_params; end
    def start(address, port = T.unsafe(nil), account = T.unsafe(nil), password = T.unsafe(nil), isapop = T.unsafe(nil), &block); end
    def use_ssl?; end
    def verify; end
  end
end

Net::POP3::VERSION = T.let(T.unsafe(nil), String)

class Net::POP3Command
  def initialize(sock); end

  def apop(account, password); end
  def auth(account, password); end
  def dele(num); end
  def inspect; end
  def list; end
  def quit; end
  def retr(num, &block); end
  def rset; end
  def socket; end
  def stat; end
  def top(num, lines = T.unsafe(nil), &block); end
  def uidl(num = T.unsafe(nil)); end

  private

  def check_response(res); end
  def check_response_auth(res); end
  def critical; end
  def get_response(fmt, *fargs); end
  def getok(fmt, *fargs); end
  def recv_response; end
end

Net::POP3Session = Net::POP3
class Net::POPAuthenticationError < ::Net::ProtoAuthError; end
class Net::POPBadResponse < ::Net::POPError; end
class Net::POPError < ::Net::ProtocolError; end

class Net::POPMail
  def initialize(num, len, pop, cmd); end

  def all(dest = T.unsafe(nil), &block); end
  def delete; end
  def delete!; end
  def deleted?; end
  def header(dest = T.unsafe(nil)); end
  def inspect; end
  def length; end
  def mail(dest = T.unsafe(nil), &block); end
  def number; end
  def pop(dest = T.unsafe(nil), &block); end
  def size; end
  def top(lines, dest = T.unsafe(nil)); end
  def uid=(uid); end
  def uidl; end
  def unique_id; end
end

Net::POPSession = Net::POP3
