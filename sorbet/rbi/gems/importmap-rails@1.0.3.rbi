# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `importmap-rails` gem.
# Please instead update this file by running `bin/tapioca gem importmap-rails`.

module Importmap; end
class Importmap::Engine < ::Rails::Engine; end

module Importmap::ImportmapTagsHelper
  def javascript_import_module_tag(*module_names); end
  def javascript_importmap_module_preload_tags(importmap = T.unsafe(nil)); end
  def javascript_importmap_shim_nonce_configuration_tag; end
  def javascript_importmap_shim_tag(minimized: T.unsafe(nil)); end
  def javascript_importmap_tags(entry_point = T.unsafe(nil), shim: T.unsafe(nil)); end
  def javascript_inline_importmap_tag(importmap_json = T.unsafe(nil)); end
  def javascript_module_preload_tag(*paths); end
end

class Importmap::Map
  def initialize; end

  def cache_sweeper(watches: T.unsafe(nil)); end
  def digest(resolver:); end
  def directories; end
  def draw(path = T.unsafe(nil), &block); end
  def packages; end
  def pin(name, to: T.unsafe(nil), preload: T.unsafe(nil)); end
  def pin_all_from(dir, under: T.unsafe(nil), to: T.unsafe(nil), preload: T.unsafe(nil)); end
  def preloaded_module_paths(resolver:, cache_key: T.unsafe(nil)); end
  def to_json(resolver:, cache_key: T.unsafe(nil)); end

  private

  def absolute_root_of(path); end
  def cache_as(name); end
  def clear_cache; end
  def expand_directories_into(paths); end
  def expanded_packages_and_directories; end
  def expanded_preloading_packages_and_directories; end
  def find_javascript_files_in_tree(path); end
  def module_name_from(filename, mapping); end
  def module_path_from(filename, mapping); end
  def remember_cache_key(name); end
  def rescuable_asset_error?(error); end
  def resolve_asset_paths(paths, resolver:); end
end

class Importmap::Map::InvalidFile < ::StandardError; end

class Importmap::Map::MappedDir < ::Struct
  def dir; end
  def dir=(_); end
  def path; end
  def path=(_); end
  def preload; end
  def preload=(_); end
  def under; end
  def under=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Importmap::Map::MappedFile < ::Struct
  def name; end
  def name=(_); end
  def path; end
  def path=(_); end
  def preload; end
  def preload=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Importmap::Reloader
  def execute(*_arg0, **_arg1, &_arg2); end
  def execute_if_updated(*_arg0, **_arg1, &_arg2); end
  def reload!; end
  def updated?(*_arg0, **_arg1, &_arg2); end

  private

  def config; end
  def import_map_paths; end
  def updater; end
end

Importmap::VERSION = T.let(T.unsafe(nil), String)
